#!/usr/bin/env python3

#
# Script to validate cluster center file generated by a experiment (so
# containing the results of a computation) to the "generated_cluster_centres"
# file that contains the clusters are randomly chosen and from which the
# data was generated.
#
#
# Author: Kristian Rietveld, Leiden University
#

import sys
import os


def read_cluster_centres(filename : str, has_std : bool = False):
    clusters = []
    with open(filename, "r") as fh:
        for line in fh:
            line = line.rstrip("\n")
            if has_std:
                point, size, std = line.split(" , ")
            else:
                point, size = line.split(" , ")

            tmp = point.split(" ")
            del tmp[0]
            coords = list(map(float, tmp))

            assert size.startswith("size = ")
            sizenum = int(size[7:])

            clusters.append((coords, sizenum))

    return clusters

def read_reference(filename : str):
    return read_cluster_centres(filename, True)

def match(ref_clusters : list, exp_clusters : list):
    if len(ref_clusters) != len(exp_clusters):
        return False

    matched = [False] * len(exp_clusters)
    taken = [False] * len(ref_clusters)
    tolerance = 10e-9

    while not all(taken):
        for i, exp_c in enumerate(exp_clusters):
            if matched[i]: continue

            for j, ref_c in enumerate(ref_clusters):
                if taken[j]: continue

                if all([abs(exp_c[0][d] - ref_c[0][d]) < tolerance for d in range(len(exp_c))]):
                    matched[i] = True
                    taken[j] = True

        tolerance *= 10
        if tolerance > 10e-1 and not all(taken):
            return False

    return True

def check(exp_filename : str, run : int):
    if not os.path.exists(exp_filename):
        print("Error: experiment output file does not exist.", file=sys.stderr)
        exit(1)

    exp_clusters = read_cluster_centres(exp_filename)

    if match(ref_clusters, exp_clusters):
        print("OK {}: result matches reference".format(run))
    else:
        print("ERR {}: result does NOT match reference".format(run))


if __name__ == '__main__':
    if len(sys.argv) != 4:
        print("usage: {} <datadir> <output-suffix> <numRuns>".format(sys.argv[0]), file=sys.stderr)
        exit(1)

    datadir = sys.argv[1]
    output_suffix = sys.argv[2]
    num_runs = int(sys.argv[3])

    # Define reference file (generated cluster) and output file of the experiment
    ref_filename = os.path.join(datadir, "generated_cluster_centres.txt")
    exp_filename = os.path.join(datadir, "cluster_centres_" + output_suffix)

    if not os.path.exists(ref_filename):
        print("Error: reference file containing generated cluster centres does not exist.", file=sys.stderr)
        exit(1)

    ref_clusters = read_reference(ref_filename)
    if num_runs == 1:
        check(exp_filename, 1)
    else:
        for run in range(1,num_runs+1):
            check(exp_filename + "_" + str(run), run)
